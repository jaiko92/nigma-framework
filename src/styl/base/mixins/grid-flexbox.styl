/*----------------------------------------------------------------------------*
	$GRID
	Mixins para crear la grilla de con base a los parametros establecidos en
	el archivo "base/config.styl" en la sección "Responsive Web Design".

	También contiene los mixins base para crear columnas personalizadas.
*----------------------------------------------------------------------------*/

$load-grid-flexbox ?= true


if $load-grid-flexbox && !$load-grid
	/* ^Bases de la grilla
	-----------------------------------------------------------------------------*/

	/**
	 *
	 * == grid() ==
	 * Contenedor de las columnas
	 *
	 */
	grid($g = $grid-gutter, $d = false, $a = false, $j = false)

		display: flex
		flex-wrap: wrap

		margin-left: -rem-calc($g / -2)
		margin-right: -rem-calc($g / -2)

		> *
			margin-left: -rem-calc($g / 2) !important
			margin-right: -rem-calc($g / 2) !important

		if $d is 'row'
			flex-direction: row
		if $d is 'row-reverse'
			flex-direction: row-reverse
		if $d is 'column'
			flex-direction: column
		if $d is 'column-reverse'
			flex-direction: column-reverse

		if $j is 'start'
			justify-content: flex-start
		if $j is 'end'
			justify-content: flex-end
		if $j is 'center'
			justify-content: center
		if $j is 'around'
			justify-content: space-around
		if $j is 'between'
			justify-content: space-between

		if $a is 'top'
			align-items: flex-start
		if $a is 'bottom'
			align-items: flex-end
		if $a is 'middle'
			align-items: center
		if $a is 'stretch'
			align-items: stretch
		if $a is 'baseline'
			align-items: baseline



	/**
	 *
	 * == col() ==
	 * Calcula ancho para columnas con posibilidad de agregar alineación y
	 * agregar medianil personalizado
	 *
	 * Ejemplo de uso:

			// Generar una columna de 5
			col(1,5)

			// Generar tres columnas de 5 con un espacio de 20px entre cada columna
			col(3,5, $g:20px)

			// Generar una columna de 3 alineada en la parte inferior
			col(1,3, 'bottom')

	 *
	 */
	col($i = 1, $cols = $grid-columns, $align = '', $g = $grid-gutter, $auto = false, $auto-left = false, $auto-right = false)

		if $auto
			flex: 1 0
			margin-left: -rem-calc($g / 2)
			margin-right: -rem-calc($g / 2)
		else
			if $g != 0
				width: s('calc(100% * %s - %s)', $i / $cols, -rem-calc($g))
			else
				width: s('calc(100% * %s)', $i / $cols)
			// margin-left: -rem-calc($g / 2)
			// margin-right: -rem-calc($g / 2)

		if $align is 'top'
			align-self: flex-start
		if $align is 'bottom'
			align-self: flex-end
		if $align is 'center'
			align-self: center
		if $align is 'baseline'
			align-self: baseline
		if $align is 'stretch'
			align-self: stretch




	/**
	 *
	 * == col-offset() ==
	 * Margen izquierdo para separar columnas
	 *
	 */
	col-offset($i = 1, $cols = $grid-columns, $g = $grid-gutter)

		margin-left: s('calc(100% * %s + %s)', $i / $cols, -rem-calc($g / 2)) !important

	/* ^Fin - Bases de la grilla
	-----------------------------------------------------------------------------*/





/* ^Generadores de la grilla
-----------------------------------------------------------------------------*/

/**
 *
 * == grid-columns-generator() ==
 * Genera las clases para las columnas
 *
 * Ejemplo:

		.g-col-m-6
		.g-col-s-8.g-col-xl-6.g-col-hd-3

 *
 */
grid-columns-generator($cols = $grid-columns, $g = $grid-gutter, $class-name = $grid-class-name, $col-class = $grid-column-class)

	for key, val in $breakpoints

		// Generar clases por cada breackpoint para columas, offsets y orders
		generate-classes()

			// Auto columnas
			.{$col-class}-{key}-auto
				col($auto: true)


			// Columnas
			for i in range(1, $cols, 1)
				.{$col-class}-{key}-{i}
					col(i, $cols, $g)


			// Offset columnas
			for i in range(1, $cols, 1)
				.{$col-class}-offset-{key}-{i}
					col-offset(i, $cols, $g)


			// Ordenar columnas
			for i in range(1, $cols, 1)
				.{$col-class}-order-{key}-{i}
					order: i


			// Alineación vertical de columnas
			.{$col-class}-top-{key}
				align-self: flex-start

			.{$col-class}-bottom-{key}
				align-self: flex-end

			.{$col-class}-center-{key}
				align-self: center

			.{$col-class}-baseline-{key}
				align-self: baseline

			.{$col-class}-stretch-{key}
				align-self: stretch


		if val == 0
			generate-classes()

		else
			// Media Queries generadas con cada breakpoint
			+min(val + 1)
				generate-classes()



/**
 *
 * == grid-container-generator() ==
 * Genera las clases aplicadas al contenedor y no a sus hijos
 *
 * Ejemplo:

	.g-container.g-m-6.g-xl-3
		.g-col Columna 1
		.g-col Columna 2
		.g-col Columna 3
		.g-col Columna 4

 *
 */
grid-container-generator($cols = $grid-columns, $g = $grid-gutter, $class-name = $grid-class-name, $col-class = $grid-column-class)

	for key, val in $breakpoints

		generate-classes()

			// Auto columnas
			.{$class-name}-{key}
				> [class~={$col-class}]
					flex: 1 0

			// Columnas
			for i in range(1, $cols, 1)
				.{$class-name}-{key}-{i}
					> [class~={$col-class}]
						col(i, $cols, $g)


			// Orientacion
			.{$class-name}-{key}-row
				flex-direction: row

			.{$class-name}-{key}-reverse
				flex-direction: row-reverse


			// Justificación horizontal de items
			.{$class-name}-{key}-left
				justify-content: flex-start

			.{$class-name}-{key}-right
				justify-content: flex-end

			.{$class-name}-{key}-center
				justify-content: center

			.{$class-name}-{key}-around
				justify-content: space-around

			.{$class-name}-{key}-between
				justify-content: space-between



			// Alineación vertical de items
			.{$class-name}-{key}-top
				align-items: flex-start

			.{$class-name}-{key}-bottom
				align-items: flex-end

			.{$class-name}-{key}-middle
				align-items: center

			.{$class-name}-{key}-baseline
				align-items: baseline

			.{$class-name}-{key}-stretch
				align-items: stretch


		if val == 0
			generate-classes()

		else
			// Media Queries generadas con cada breakpoint
			+min(val + 1)
				generate-classes()


/* ^Fin - Generadores de la grilla
-----------------------------------------------------------------------------*/





/* ^Contenedores
-----------------------------------------------------------------------------*/

container-generator()

	.{$grid-class-name}-container
		width: 100%
		margin-left: auto
		margin-right: auto

		+max('l')
			width: calc(100% - 40px)
			margin-right: 20px
			margin-left: 20px

		+min('l')
			max-width: 750px

		+desktop()
			max-width: 970px

		+hd()
			max-width: -add-px($container)


	.{$grid-row-class}
		grid()

	[class*={$grid-column-class}]
		width: s('calc(100% - %s)', -rem-calc($grid-gutter))


/* ^Fin - Contenedores
-----------------------------------------------------------------------------*/

if $load-grid-flexbox && !$load-grid

	if $active-grid-flexbox
		grid-columns-generator()
		grid-container-generator()

	container-generator()
